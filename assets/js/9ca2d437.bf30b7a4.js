"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4737],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=s(t),m=a,f=d["".concat(u,".").concat(m)]||d[m]||c[m]||l;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=d;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8215:function(e,n,t){t.d(n,{Z:function(){return a}});var r=t(7294);function a(e){var n=e.children,t=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},3736:function(e,n,t){t.d(n,{Z:function(){return c}});var r=t(7294),a=t(3117),l=t(2389),i=t(3342),o=t(6010),u="tabItem_LplD";function s(e){var n,t,l,s=e.lazy,p=e.block,c=e.defaultValue,d=e.values,m=e.groupId,f=e.className,h=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=d?d:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),y=(0,i.lx)(g,(function(e,n){return e.value===n.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===c?c:null!=(n=null!=c?c:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(l=h[0])?void 0:l.props.value;if(null!==v&&!g.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=(0,i.UB)(),k=b.tabGroupChoices,w=b.setTabGroupChoices,N=(0,r.useState)(v),T=N[0],x=N[1],j=[],C=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var E=k[m];null!=E&&E!==T&&g.some((function(e){return e.value===E}))&&x(E)}var O=function(e){var n=e.currentTarget,t=j.indexOf(n),r=g[t].value;r!==T&&(C(n),x(r),null!=m&&w(m,r))},I=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r=j.indexOf(e.currentTarget)+1;t=j[r]||j[0];break;case"ArrowLeft":var a=j.indexOf(e.currentTarget)-1;t=j[a]||j[j.length-1]}null==(n=t)||n.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":p},f)},g.map((function(e){var n=e.value,t=e.label,l=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:function(e){return j.push(e)},onKeyDown:I,onFocus:O,onClick:O},l,{className:(0,o.Z)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":T===n})}),null!=t?t:n)}))),s?(0,r.cloneElement)(h.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},h.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==T})}))))}function p(e){var n=(0,l.Z)();return r.createElement(s,(0,a.Z)({key:String(n)},e))}function c(e){return(0,r.useEffect)((function(){window.localStorage.getItem("docusaurus.tab.npm2yarn")||window.localStorage.setItem("docusaurus.tab.npm2yarn","yarn")}),[]),r.createElement(r.Fragment,null,r.createElement(p,e))}},3740:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var r=t(3117),a=t(102),l=(t(7294),t(3905)),i=t(3736),o=t(8215),u=["components"],s={title:"Create a file plugin"},p="File Plugin",c={unversionedId:"guides/file-plugin",id:"guides/file-plugin",title:"Create a file plugin",description:"This guide will give an introduction about the File Service and steps required to create a custom file uploader plugin for Adminfirstly. It build on article about creating custom plugins.",source:"@site/../../docs/content/guides/file-plugin.md",sourceDirName:"guides",slug:"/guides/file-plugin",permalink:"/guides/file-plugin",editUrl:"https://github.com/medusajs/medusa/edit/master/www/../../docs/content/guides/file-plugin.md",tags:[],version:"current",frontMatter:{title:"Create a file plugin"}},d={},m=[{value:"The File API",id:"the-file-api",level:2},{value:"Implementing the File Service",id:"implementing-the-file-service",level:2},{value:"Example",id:"example",level:2},{value:"Implementation",id:"implementation",level:3},{value:"Publishing",id:"publishing",level:3},{value:"Summary",id:"summary",level:2}],f={toc:m};function h(e){var n=e.components,t=(0,a.Z)(e,u);return(0,l.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"file-plugin"},"File Plugin"),(0,l.kt)("p",null,"This guide will give an introduction about the File Service and steps required to create a custom file uploader plugin for Adminfirstly. It build on article about ",(0,l.kt)("a",{parentName:"p",href:"https://docs.adminfirstly.com/guides/plugins"},"creating custom plugins"),". "),(0,l.kt)("p",null,"As an example, we will create a File plugin that uploads the product images to Cloudinary. "),(0,l.kt)("h2",{id:"the-file-api"},"The File API"),(0,l.kt)("p",null,"The file api is used to upload and manage product images used in Adminfirstly. "),(0,l.kt)("h2",{id:"implementing-the-file-service"},"Implementing the File Service"),(0,l.kt)("p",null,"The File Service is an built in interface in Adminfirstly Core. It has two methods which must be overidden by our custom implementation of the service: ",(0,l.kt)("inlineCode",{parentName:"p"},"upload")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"delete"),"."),(0,l.kt)("p",null,"As the names suggest, upload allows us to specify the logic for uploading the file/image to our service while delete is used for deleting the image."),(0,l.kt)("p",null,"Both of the methods must return an promise.\nThe upload method should return the url of uploaded image.\nIn case of any error uploading, both methods should reject the promise and return an appropriate error message."),(0,l.kt)("p",null,"Here is the implementation of the base file service that we will extend. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'/**\n * Interface for file connectors\n * @interface\n */\nclass BaseFileService extends BaseService {\n  constructor() {\n    super()\n  }\n\n  upload() {\n    throw Error("upload must be overridden by the child class")\n  }\n\n  delete() {\n    throw Error("delete must be overridden by the child class")\n  }\n}\n\nexport default BaseFileService\n')),(0,l.kt)("p",null,"See the example below for detailed usage."),(0,l.kt)("h2",{id:"example"},"Example"),(0,l.kt)("p",null,"We will create an plugin for uploading product images to ",(0,l.kt)("a",{parentName:"p",href:"https://cloudinary.com/"},"Cloudinary")),(0,l.kt)("p",null,"The first step is to create an account on Cloudinary and copy the credentials like given below. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'cloud_name: "xx"\napi_key: "xx"\napi_secret: "xx"\n\n')),(0,l.kt)("p",null,"The first step in creating a plugin is to initialize the Node.js project:"),(0,l.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm init\n"))),(0,l.kt)(o.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"yarn init\n")))),(0,l.kt)("p",null,"This command will ask you to fill out your project's metadata, which will eventually be used when publishing the package to NPM. After this command completes, you are ready to start implementing the functionality."),(0,l.kt)("p",null,"Next up, we need to install cloudinary's Node.js SDK."),(0,l.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"npm install cloudinary\n"))),(0,l.kt)(o.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add cloudinary\n")))),(0,l.kt)("h3",{id:"implementation"},"Implementation"),(0,l.kt)("p",null,"To quickly get started with the implementation, we advise you to copy ",(0,l.kt)("inlineCode",{parentName:"p"},"/services/"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"/api/"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"/subscribers/")," and the config files from the tutorial and add them in ",(0,l.kt)("inlineCode",{parentName:"p"},"/src"),". As a result, you should have the following folder structure:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},".\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 api\n\u2502   \u2514\u2500\u2500 services\n\u2502   \u2514\u2500\u2500 subscribers\n\u251c\u2500\u2500 .babelrc\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 adminfirstly-config.js\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 package.json\n")),(0,l.kt)("p",null,"We will create a new file ",(0,l.kt)("inlineCode",{parentName:"p"},"cloudinary.js")," in the ",(0,l.kt)("inlineCode",{parentName:"p"},"services")," directory."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'import fs from "fs";\n\nimport { v2 as cloudinary } from "cloudinary";\nimport { FileService } from "adminfirstly-interfaces";\n\nclass CloudinaryService extends FileService {\n    constructor({}, options) {\n        super();\n\n        // Initialize the Cloudinary sdk\n        cloudinary.config({\n            cloud_name: options.cloud_name,\n            api_key: options.api_key,\n            api_secret: options.api_secret,\n            secure: options.secure,\n        });\n    }\n\n    // File upload\n    upload(file) {\n        console.log("Starting image upload");\n        return new Promise((resolve, reject) => {\n            // upload_stream allows to upload a file stream\n            var upload_stream = cloudinary.uploader.upload_stream(\n                {},\n                function (err, image) {\n                    if (err) {\n                        // Reject and return an error if the file upload failed\n                        console.error(err);\n                        reject(err);\n                        return;\n                    }\n                    // Return the url of image uploaded\n                    resolve({ url: image.url });\n                }\n            );\n            // Create a file stream from path and forward it to our uploader\n            fs.createReadStream(file.path).pipe(upload_stream);\n        });\n    }\n\n    delete(file) {\n        return new Promise((resolve, reject) => {\n            // Pass the name of file to be deleted\n            cloudinary.uploader.destroy(file, function (result) {\n                resolve(result);\n            });\n        });\n    }\n}\n\nexport default CloudinaryService;\n')),(0,l.kt)("h3",{id:"publishing"},"Publishing"),(0,l.kt)("p",null,"In order for your plugin to become a part of the Adminfirstly plugin ecosystem, you need to publish it to NPM. Make sure that you've included the ",(0,l.kt)("inlineCode",{parentName:"p"},"package.json")," file. NPM uses the details of this file to configure the publishing. Please include ",(0,l.kt)("inlineCode",{parentName:"p"},"adminfirstly")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"adminfirstly-plugin")," and possibly more in the ",(0,l.kt)("inlineCode",{parentName:"p"},"keywords")," field of the ",(0,l.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'{\n    "name": "adminfirstly-file-cloudinary",\n    ...\n  "keywords": [\n    "adminfirstly",\n    "adminfirstly-file",\n    "adminfirstly-plugin"\n  ],\n  "description": "Cloudinary File Plugin for Adminfirstly Commerce",\n    ...\n}\n')),(0,l.kt)("p",null,"Finally, you should add a README for the plugin, such that the community understands the purpose of the plugin and how to install it."),(0,l.kt)("h2",{id:"summary"},"Summary"),(0,l.kt)("p",null,"As a result of following this guide, you should now be able to both implement a custom file plugin for your Adminfirstly project."))}h.isMDXComponent=!0}}]);