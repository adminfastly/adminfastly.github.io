"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1821],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=c(n),d=i,m=h["".concat(s,".").concat(d)]||h[d]||p[d]||r;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8215:function(e,t,n){n.d(t,{Z:function(){return i}});var a=n(7294);function i(e){var t=e.children,n=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:i},t)}},3736:function(e,t,n){n.d(t,{Z:function(){return p}});var a=n(7294),i=n(3117),r=n(2389),o=n(3342),l=n(6010),s="tabItem_LplD";function c(e){var t,n,r,c=e.lazy,u=e.block,p=e.defaultValue,h=e.values,d=e.groupId,m=e.className,f=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=h?h:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),y=(0,o.lx)(g,(function(e,t){return e.value===t.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===p?p:null!=(t=null!=p?p:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(r=f[0])?void 0:r.props.value;if(null!==v&&!g.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=(0,o.UB)(),k=b.tabGroupChoices,w=b.setTabGroupChoices,S=(0,a.useState)(v),x=S[0],N=S[1],T=[],I=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var M=k[d];null!=M&&M!==x&&g.some((function(e){return e.value===M}))&&N(M)}var O=function(e){var t=e.currentTarget,n=T.indexOf(t),a=g[n].value;a!==x&&(I(t),N(a),null!=d&&w(d,a))},E=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=T.indexOf(e.currentTarget)+1;n=T[a]||T[0];break;case"ArrowLeft":var i=T.indexOf(e.currentTarget)-1;n=T[i]||T[T.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":u},m)},g.map((function(e){var t=e.value,n=e.label,r=e.attributes;return a.createElement("li",(0,i.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:function(e){return T.push(e)},onKeyDown:E,onFocus:O,onClick:O},r,{className:(0,l.Z)("tabs__item",s,null==r?void 0:r.className,{"tabs__item--active":x===t})}),null!=n?n:t)}))),c?(0,a.cloneElement)(f.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function u(e){var t=(0,r.Z)();return a.createElement(c,(0,i.Z)({key:String(t)},e))}function p(e){return(0,a.useEffect)((function(){window.localStorage.getItem("docusaurus.tab.npm2yarn")||window.localStorage.setItem("docusaurus.tab.npm2yarn","yarn")}),[]),a.createElement(a.Fragment,null,a.createElement(u,e))}},4026:function(e,t,n){n.r(t),n.d(t,{assets:function(){return h},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return d}});var a=n(3117),i=n(102),r=(n(7294),n(3905)),o=n(3736),l=n(8215),s=["components"],c={},u="MeiliSearch",p={unversionedId:"add-plugins/meilisearch",id:"add-plugins/meilisearch",title:"MeiliSearch",description:"Introduction",source:"@site/../../docs/content/add-plugins/meilisearch.md",sourceDirName:"add-plugins",slug:"/add-plugins/meilisearch",permalink:"/add-plugins/meilisearch",editUrl:"https://github.com/medusajs/medusa/edit/master/www/../../docs/content/add-plugins/meilisearch.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Algolia",permalink:"/add-plugins/algolia"},next:{title:"MinIO",permalink:"/add-plugins/minio"}},h={},d=[{value:"Introduction",id:"introduction",level:3},{value:"Installation",id:"installation",level:3},{value:"Simple Usage",id:"simple-usage",level:3},{value:"Highlighting and Pagination in a React Storefront",id:"highlighting-and-pagination-in-a-react-storefront",level:3},{value:"Demo: Palmes Storefront",id:"demo-palmes-storefront",level:3},{value:"Enhance your development experience with MeiliSearch&#39;s Web UI",id:"enhance-your-development-experience-with-meilisearchs-web-ui",level:3},{value:"More to come",id:"more-to-come",level:3}],m={toc:d};function f(e){var t=e.components,n=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"meilisearch"},"MeiliSearch"),(0,r.kt)("h3",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Search functionality is one of the most useful and important features in e-commerce platforms. From increasing customer conversion rates to significantly improving the user experience, search engines can enable significant business growth. Adminfirstly brings search functionality to your doorstep by leveraging some of the already existing search engines out there."),(0,r.kt)("p",null,"We have developed a plugin that will allow you to use the performant, open-source, and feature-rich search engine MeiliSearch."),(0,r.kt)("p",null,"MeiliSearch is a super-fast, open-source, search engine built in Rust. It comes with a wide range of features such as typo-tolerance, filtering, sorting, and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.meilisearch.com/learn/what_is_meilisearch/features.html"},"much more"),". MeiliSearch also provides a pleasant developer experience, as it is extremely intuitive and newcomer-friendly - so even if you're new to the search engine \"ecosystem\", you'll have a great time navigating through their documentation."),(0,r.kt)("p",null,"Through Adminfirstly flexible plugin system, it is possible to enable search functionality into your adminfirstly applications with minimum hassle by including our new plugin ",(0,r.kt)("inlineCode",{parentName:"p"},"adminfirstly-plugin-meilisearch")," to your ",(0,r.kt)("inlineCode",{parentName:"p"},"adminfirstly-config.js")," file."),(0,r.kt)("h3",{id:"installation"},"Installation"),(0,r.kt)("p",null,"In case you don't have MeiliSearch installed locally on your environment yet, you can run the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Install MeiliSearch\ncurl -L https://install.meilisearch.com | sh\n\n# Launch MeiliSearch\n./meilisearch\n")),(0,r.kt)("p",null,"For other installation alternatives, you can head over to Meilisearch's ",(0,r.kt)("a",{parentName:"p",href:"https://docs.meilisearch.com/learn/getting_started/installation.html"},"installation guide"),"."),(0,r.kt)("p",null,"In order to add the plugin to your adminfirstly project, you will need to first install the plugin using your favorite package manager:"),(0,r.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install adminfirstly-plugin-meilisearch\n"))),(0,r.kt)(l.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add adminfirstly-plugin-meilisearch\n")))),(0,r.kt)("p",null,"Then in your ",(0,r.kt)("inlineCode",{parentName:"p"},"adminfirstly-config.js")," file, add the plugin to your ",(0,r.kt)("inlineCode",{parentName:"p"},"plugins")," array. For this example, assumption is that you're leveraging MeiliSearch to perform searches on an index called ",(0,r.kt)("inlineCode",{parentName:"p"},"products")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'module.exports = {\n  // ...other options\n  plugins: [\n    // ...other plugins\n    {\n      resolve: `adminfirstly-plugin-meilisearch`,\n      options: {\n        // config object passed when creating an instance of the MeiliSearch client\n        config: {\n          host: "http://127.0.0.1:7700",\n          apiKey: "your_master_key",\n        },\n        settings: {\n          // index name\n          products: {\n            // MeiliSearch\'s setting options to be set on a particular index\n            searchableAttributes: ["title", "description", "variant_sku"],\n            displayedAttributes: ["title", "description", "variant_sku"],\n          },\n        },\n      },\n    },\n  ],\n}\n')),(0,r.kt)("p",null,"Et voil\xe0! That's all it takes to make adminfirstly and MeiliSearch work in great harmony. Please note that you can use any other setting from this ",(0,r.kt)("a",{parentName:"p",href:"https://docs.meilisearch.com/reference/features/settings.html#settings"},"list")," such as ",(0,r.kt)("inlineCode",{parentName:"p"},"filterableAttributes"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"sortableAttributes"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"synonyms"),". We are working on another blog post that will demonstrate how you can make use of these settings to build a great storefront experience, so stay tuned to that!"),(0,r.kt)("h3",{id:"simple-usage"},"Simple Usage"),(0,r.kt)("p",null,"Adminfirstly exposes an API layer that can serve as an abstraction over various search providers. We will now be interacting with one of the search routes parts of that layer, namely, the ",(0,r.kt)("inlineCode",{parentName:"p"},"POST /store/products/search")," route. The route will enable you to test out the integration between Adminfirstly and MeiliSearch. The endpoint takes a mandatory ",(0,r.kt)("inlineCode",{parentName:"p"},"q")," property and a set of optional parameters which will be passed to MeiliSearch's ",(0,r.kt)("inlineCode",{parentName:"p"},"search()")," method as a second argument. The list of the parameters which can be provided can be found in MeiliSearch's ",(0,r.kt)("a",{parentName:"p",href:"https://docs.meilisearch.com/reference/api/search.html#search-in-an-index-with-post-route"},"docs"),"."),(0,r.kt)("p",null,"Let's use Postman for this short demo to get some search results:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zu09kroufrux94y6d5rq.png",alt:"Image description"})),(0,r.kt)("p",null,'We tried to perform a search query "creneck" to find all crewnecks in our store. Note how the explicit mistake of leaving a "w" out from "crewneck" still yields the correct results.'),(0,r.kt)("p",null,"Postman is not the most exciting client to use to showcase this, so in the next section, there is a short guide on how you can use React and MeiliSearchh's ecosystem to build something that looks better than JSON."),(0,r.kt)("h3",{id:"highlighting-and-pagination-in-a-react-storefront"},"Highlighting and Pagination in a React Storefront"),(0,r.kt)("p",null,"The Adminfirstly + MeiliSearch integration opens up a lot of capabilities for creating a rich UX for your storefront. The plugin indexes all your products and listens to any updates made on them, so you can then leverage any client-side SDKs developed by the MeiliSearch team to build cool search experiences for storefronts. For example, MeiliSearch exposes a React ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/meilisearch/meilisearch-react/"},"adapter")," that can be used with React InstantSearch (made by Algolia) which provides features such as highlighting, filtering, and pagination out of the box."),(0,r.kt)("p",null,"In order to leverage this functionality, you'll need to install the corresponding packages by running:"),(0,r.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install react-instantsearch-dom @meilisearch/instant-meilisearch\n"))),(0,r.kt)(l.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add react-instantsearch-dom @meilisearch/instant-meilisearch\n")))),(0,r.kt)("p",null,"You can then use the MeiliSearch client in your react app:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import React from "react"\nimport {\n  InstantSearch,\n  Hits,\n  SearchBox,\n  Pagination,\n  Highlight,\n} from "react-instantsearch-dom"\nimport { instantMeiliSearch } from "@meilisearch/instant-meilisearch"\n\nconst searchClient = instantMeiliSearch(\n  "http://127.0.0.1:7700",\n  "your_master_key"\n)\n\nconst SearchPage = () => (\n  <InstantSearch indexName="products" searchClient={searchClient}>\n    <SearchBox />\n    <Hits hitComponent={Hit} />\n    <Pagination />\n  </InstantSearch>\n)\n\nconst Hit = ({ hit }) => {\n  return (\n    <div key={hit.id}>\n      <div className="hit-name">\n        <Highlight attribute="name" hit={hit} />\n      </div>\n      <img src={hit.image} align="left" alt={hit.name} />\n      <div className="hit-description">\n        <Snippet attribute="description" hit={hit} />\n      </div>\n      <div className="hit-info">price: {hit.price}</div>\n      <div className="hit-info">release date: {hit.releaseDate}</div>\n    </div>\n  )\n}\n')),(0,r.kt)("p",null,"If you want to play around with the various features provided by React InstantSearch you can read more on algolia's ",(0,r.kt)("a",{parentName:"p",href:"https://www.algolia.com/doc/guides/building-search-ui/what-is-instantsearch/react/"},"documentation"),". You can also use MeiliSearch's react ",(0,r.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/ms-react-is-sh9ud?fontsize=14&hidenavigation=1&theme=dark&file=/src/App.js"},"demo")," for a more interactive example."),(0,r.kt)("h3",{id:"demo-palmes-storefront"},"Demo: Palmes Storefront"),(0,r.kt)("p",null,"By using the above libraries (React, ",(0,r.kt)("inlineCode",{parentName:"p"},"react-instantsearch-dom"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"instant-meilisearch"),") in addition to the adminfirstly plugin, we have successfully integrated the MeiliSearch plugin for one of our customers: Palmes. Following is a short GIF demoing the functionality."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e0b596ab-e146-4151-a8b0-42c94401761f/Palmes_Tennis_Society.mp4"},"Palmes Tennis Society.mp4")),(0,r.kt)("h3",{id:"enhance-your-development-experience-with-meilisearchs-web-ui"},"Enhance your development experience with MeiliSearch's Web UI"),(0,r.kt)("p",null,"For a quicker feedback loop on what's happening on your search engine, you can use MeiliSearch's helpful out-of-the-box web interface to run some searches and get live results. It comes with MeiliSearch when you first install it and requires 0 configuration. When integrating the MeiliSearch plugin to existing adminfirstly projects, we also found it to be extremely helpful for debugging"),(0,r.kt)("iframe",{src:"https://player.vimeo.com/video/639184340?h=593662d9f6",width:"640",height:"360",frameborder:"0",allow:"autoplay; fullscreen; picture-in-picture",allowfullscreen:!0}),(0,r.kt)("h3",{id:"more-to-come"},"More to come"),(0,r.kt)("p",null,"As briefly mentioned before, we're preparing another blog post that dives a bit deeper into the Adminfirstly Search API and provides a more in-depth walkthrough on how to build a feature-rich search experience that includes filtering, synonyms, stop-words, and more!"))}f.isMDXComponent=!0}}]);