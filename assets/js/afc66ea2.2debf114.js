"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6226],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8215:function(e,t,n){n.d(t,{Z:function(){return r}});var a=n(7294);function r(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},3736:function(e,t,n){n.d(t,{Z:function(){return u}});var a=n(7294),r=n(3117),i=n(2389),o=n(3342),l=n(6010),s="tabItem_LplD";function c(e){var t,n,i,c=e.lazy,p=e.block,u=e.defaultValue,d=e.values,m=e.groupId,h=e.className,f=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=d?d:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,o.lx)(y,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===u?u:null!=(t=null!=u?u:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(i=f[0])?void 0:i.props.value;if(null!==g&&!y.some((function(e){return e.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=(0,o.UB)(),w=k.tabGroupChoices,b=k.setTabGroupChoices,N=(0,a.useState)(g),S=N[0],C=N[1],O=[],P=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var T=w[m];null!=T&&T!==S&&y.some((function(e){return e.value===T}))&&C(T)}var j=function(e){var t=e.currentTarget,n=O.indexOf(t),a=y[n].value;a!==S&&(P(t),C(a),null!=m&&b(m,a))},E=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=O.indexOf(e.currentTarget)+1;n=O[a]||O[0];break;case"ArrowLeft":var r=O.indexOf(e.currentTarget)-1;n=O[r]||O[O.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":p},h)},y.map((function(e){var t=e.value,n=e.label,i=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:S===t?0:-1,"aria-selected":S===t,key:t,ref:function(e){return O.push(e)},onKeyDown:E,onFocus:j,onClick:j},i,{className:(0,l.Z)("tabs__item",s,null==i?void 0:i.className,{"tabs__item--active":S===t})}),null!=n?n:t)}))),c?(0,a.cloneElement)(f.filter((function(e){return e.props.value===S}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==S})}))))}function p(e){var t=(0,i.Z)();return a.createElement(c,(0,r.Z)({key:String(t)},e))}function u(e){return(0,a.useEffect)((function(){window.localStorage.getItem("docusaurus.tab.npm2yarn")||window.localStorage.setItem("docusaurus.tab.npm2yarn","yarn")}),[]),a.createElement(a.Fragment,null,a.createElement(p,e))}},4909:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return m}});var a=n(3117),r=n(102),i=(n(7294),n(3905)),o=n(3736),l=n(8215),s=["components"],c={},p="Frontend Payment Flow in Checkout",u={unversionedId:"advanced/backend/payment/frontend-payment-flow-in-checkout",id:"advanced/backend/payment/frontend-payment-flow-in-checkout",title:"Frontend Payment Flow in Checkout",description:"Introduction",source:"@site/../../docs/content/advanced/backend/payment/frontend-payment-flow-in-checkout.md",sourceDirName:"advanced/backend/payment",slug:"/advanced/backend/payment/frontend-payment-flow-in-checkout",permalink:"/advanced/backend/payment/frontend-payment-flow-in-checkout",editUrl:"https://github.com/medusajs/medusa/edit/master/www/../../docs/content/advanced/backend/payment/frontend-payment-flow-in-checkout.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How to Create a Payment Provider",permalink:"/advanced/backend/payment/how-to-create-payment-provider"},next:{title:"Notifications and automated flows",permalink:"/how-to/notification-api"}},d={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Glossary",id:"glossary",level:2},{value:"Checkout flow",id:"checkout-flow",level:2},{value:"Initializing the checkout",id:"initializing-the-checkout",level:3},{value:"Adding customer information",id:"adding-customer-information",level:3},{value:"Selecting payment provider",id:"selecting-payment-provider",level:3},{value:"Choosing a shipping method",id:"choosing-a-shipping-method",level:3},{value:"Collecting payment details",id:"collecting-payment-details",level:3},{value:"Completing the cart",id:"completing-the-cart",level:3},{value:"Summary",id:"summary",level:2},{value:"What&#39;s next?",id:"whats-next",level:2}],h={toc:m};function f(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"frontend-payment-flow-in-checkout"},"Frontend Payment Flow in Checkout"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"The purpose of this guide is to describe a checkout flow in Adminfirstly. It is assumed that you've completed our ",(0,i.kt)("a",{parentName:"p",href:"https://docs.adminfirstly.com/quickstart/quick-start"},"Quickstart")," or ",(0,i.kt)("a",{parentName:"p",href:"https://docs.adminfirstly.com/tutorial/set-up-your-development-environment"},"Tutorial")," and are familiar with the technologies we use in our stack. Additionally, having an understanding of the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.adminfirstly.com/api/store/auth"},"core API")," would serve as a great foundation for this walkthrough."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"All code snippets in the following guide, use the JS SDK distributed through ",(0,i.kt)("strong",{parentName:"p"},"npm"),". To install it, run:"),(0,i.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"npm",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @adminfirstly/adminfirstly-js\n"))),(0,i.kt)(l.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @adminfirstly/adminfirstly-js\n")))))),(0,i.kt)("h2",{id:"glossary"},"Glossary"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Cart"),": The Cart contains all the information needed for customers to complete an Order. In the Cart customers gather the items they wish to purchase, they add shipping and billing details and complete payment information."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"LineItem"),": Line Items represent an expense added to a Cart. Typically this will be a Product Variant and a certain quantity of the same variant. Line Items hold descriptive fields that help communicate its contents and price."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"PaymentSession"),": A Payment Session is a Adminfirstly abstraction that unifies the APIs of multiple payment gateways. Payment Sessions are ",(0,i.kt)("em",{parentName:"li"},"initialized")," when the customer begins a checkout and are ",(0,i.kt)("em",{parentName:"li"},"authorized")," prior to an Order being placed. Payment Sessions are created based on the available Payment Providers configured in a Cart's region."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"ShippingOption"),": A Shipping Option represents a way in which an Order can be fulfilled. Shipping Options have a price and are associated with a Fulfillment Provider that will handle the shipment later in the Order flow. Once a customer selects a Shipping Option it becomes a Shipping Method."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"ShippingMethod"),": Shipping Methods are unique to each Cart and can thereby hold either overwrites for fields in a Shipping Option (e.g. price) or additional details (e.g. an id representing a parcel pickup location).")),(0,i.kt)("h2",{id:"checkout-flow"},"Checkout flow"),(0,i.kt)("p",null,"To create an order from a cart, we go through the following flow."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"At this point, it assumed that the customer has created a cart, added items and is now at the initial step of the checkout flow."))),(0,i.kt)("h3",{id:"initializing-the-checkout"},"Initializing the checkout"),(0,i.kt)("p",null,"The first step in the flow is to ",(0,i.kt)("em",{parentName:"p"},"initialize")," the configured Payment Sessions for the Cart. If you are using the ",(0,i.kt)("inlineCode",{parentName:"p"},"adminfirstly-starter-default")," starter, this call will result in the ",(0,i.kt)("inlineCode",{parentName:"p"},"cart.payment_sessions")," array being filled with one Payment Session for the manual payment provider."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const { cart } = await adminfirstly.carts.createPaymentSessions("cart_id")\n')),(0,i.kt)("p",null,"To give a more real life example, it is assumed that ",(0,i.kt)("inlineCode",{parentName:"p"},"adminfirstly-payment-stripe")," is installed in your project in which case the call will result in a ",(0,i.kt)("a",{parentName:"p",href:"https://stripe.com/docs/api/payment_intents"},"Stripe PaymentIntent")," being created. The unique provider data for each Payment Session can be found in the Payment Session's ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," field; this data can be used in front end implementations e.g. if using Stripe Elements the ",(0,i.kt)("inlineCode",{parentName:"p"},"client_secret")," can be retrieved through ",(0,i.kt)("inlineCode",{parentName:"p"},"session.data.client_secret"),"."),(0,i.kt)("h3",{id:"adding-customer-information"},"Adding customer information"),(0,i.kt)("p",null,"After initializing the checkout flow, you would typically have one big step or several smaller steps for gathering user information; email, address, country, and more. To store this data you may update the cart with each of field or all fields at the same time."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const { cart } = await adminfirstly.carts.update("cart_id", {\n    email: "lebron@james.com",\n    shipping_address: {\n        first_name: "",\n        last_name: "",\n        ...\n    }\n})\n')),(0,i.kt)("h3",{id:"selecting-payment-provider"},"Selecting payment provider"),(0,i.kt)("p",null,"This step is only applicable if you have multiple Payment Sessions installed in your project. In cases where only one Payment Provider is configured the Payment Session will be preselected. In all other cases your implementations should call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const { cart } = await adminfirstly.carts.setPaymentSession("cart_id", {\n    provider_id: "stripe"\n})\n')),(0,i.kt)("h3",{id:"choosing-a-shipping-method"},"Choosing a shipping method"),(0,i.kt)("p",null,"Before reaching the payment step, you would typically require the customer to choose a Shipping Method from a number of options. In Adminfirstly you can set rules that must be met for a Shipping Option to be available for a Cart. To get the available shipping options for a Cart you should call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const { shipping_options } = await adminfirstly.carts.listCartOptions("cart_id")\n')),(0,i.kt)("p",null,"Choosing a Shipping Option, will create a Shipping Method and attach it to the Cart. The second argument to the function in the snippet below holds the id of the selected option."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript="},'const { cart } = await adminfirstly.carts.addShippingMethod("cart_id", { option_id: "option_id"})\n')),(0,i.kt)("h3",{id:"collecting-payment-details"},"Collecting payment details"),(0,i.kt)("p",null,"The following snippet shows how we use Stripe to collect payment details from the customer. Note that we are using the ",(0,i.kt)("inlineCode",{parentName:"p"},"client_secret")," from the Stripe PaymentIntent in ",(0,i.kt)("inlineCode",{parentName:"p"},"data")," on the payment session as this is required by Stripe Elements."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'import { CardElement, useStripe, useElements } from "@stripe/react-stripe-js";\n\n...\n\nconst stripe = useStripe();\nconst elements = useElements();\n\n\nconst handleSubmit = () => {\n    ...\n    const { paymentIntent, error } = await stripe.confirmCardPayment(\n      cart.payment_session.data.client_secret,\n      {\n        payment_method: {\n          card: elements.getElement(CardElement),\n        },\n      }\n    );\n    ...\n}\n\nreturn <CardElement id="card-element" />\n')),(0,i.kt)("p",null,"After collecting the payment details, the customer can complete the checkout flow."),(0,i.kt)("h3",{id:"completing-the-cart"},"Completing the cart"),(0,i.kt)("p",null,"When all relevant customer information has been captured, your implementation should proceed to the final step: completing the cart. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const { order } = await adminfirstly.carts.complete("cart_id")\n')),(0,i.kt)("p",null,"If all information is collected correctly throughout the checkout flow, the call will place an Order based on the details gathered in the Cart."),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"You now have a solid foundation for creating your own checkout flows using Adminfirstly. Throughout this guide, we've used Stripe as a Payment Provider. Stripe is one of the most popular providers and we have an official plugin that you can easily install in your project."),(0,i.kt)("h2",{id:"whats-next"},"What's next?"),(0,i.kt)("p",null,"See the checkout flow, explained in the previous sections, in one of our frontend starters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/adminfirstly/nextjs-starter-adminfirstly"},"Nextjs Starter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/adminfirstly/gatsby-starter-adminfirstly"},"Gatsby Starter"))))}f.isMDXComponent=!0}}]);